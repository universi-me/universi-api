spring:
  profiles:
    active: ${API_PROFILE_ACTIVE:dev}

jwt:
  secret:
    key: ${API_JWT_SECRET_KEY:test_key}

# DATABASE ENV VARIABLES
database:
  name: ${API_DB_NAME:universime_api}
  port: ${API_DB_PORT:5432}
  domain: ${API_DB_DOMAIN:localhost}
  url: ${API_DB_URL:jdbc:postgresql://${database.domain}:${database.port}/${database.name}}
  username: ${API_DB_USER:postgres}
  password: ${API_DB_PASS:postgres}
  flyway:
    url: ${API_DB_FLY_URL:${database.url}}
    username: ${API_DB_FLY_USER:${database.username}}
    password: ${API_DB_FLY_PASS:${database.password}}


# SERVER
server:
  port: ${API_SERVER_PORT:8080}
  servlet:
    session:
      timeout: 43200
      persistent: false
    multipart:
      enabled: true
      max-file-size: 200MB
      max-request-size: 200MB


# SPRINGDOC
springdoc:
  version: 1.0
  api-docs:
    path: /api/v3/api-docs
  swagger-ui:
    enabled: ${API_SWAGGER_ENABLED:true}
    path: /api/swagger-ui.html

# GOOGLE API AUTH
GOOGLE_CLIENT_ID: ${API_GOOGLE_CLIENT_ID:110833050076-ib680ela4hfqr2c0lhc9h19snrsvltnd.apps.googleusercontent.com}

# IMAGEM CONFIG
SAVE_IMAGE_LOCAL: ${API_SAVE_IMAGE_LOCAL:false}
PATH_IMAGE_SAVE: ${API_PATH_IMAGE_SAVE:src/main/resources/static/img/imagem/}

# IMGUR API CLIENT-ID
IMGUR_CLIENT_ID: ${API_IMGUR_CLIENT_ID:e4f58fc81daec99}

# LOGIN CONFIG
SIGNUP_ENABLED: ${API_SIGNUP_ENABLED:true}
LOGIN_GOOGLE_ENABLED: ${API_LOGIN_GOOGLE_ENABLED:true}


# TEST Profile
---
spring:
  config:
    activate:
      on-profile: test
  # Flyway
  flyway:
    enabled: true
    init-sqls:
      - CREATE ALIAS IF NOT EXISTS uuid_generate_v4 AS 'UUID ez_uuid() { return UUID.randomUUID(); }';
    baseline-on-migrate: true
    locations: classpath:db/migration
    url: jdbc:h2:mem:test;DATABASE_TO_UPPER=false;DB_CLOSE_DELAY=-1;
    password:
    user: sa
  datasource:
    url: jdbc:h2:mem:test;DATABASE_TO_UPPER=false;DB_CLOSE_DELAY=-1;
    driverClassName: org.h2.Driver
    continue-on-error: true
    username: sa
    password:
  # H2 Console
  h2:
    console:
      enabled: true
      path: /api/h2-console
  # JPA
  jpa:
    show-sql: true
    format_sql: true
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        dialect: org.hibernate.dialect.H2Dialect
        show_sql: true
        format_sql: true
logging:
  level:
    org:
      springframework:
        web: DEBUG

# DEV Profile
---
spring:
  config:
    activate:
      on-profile: dev

  # POSTGRES
  datasource:
    url: ${database.url}
    username: ${database.username}
    password: ${database.password}
  #JPA
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  # Flyway
  flyway:
    enabled: true
    init-sqls:
      - CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    baseline-on-migrate: true
    locations: classpath:db/migration
    url: ${database.flyway.url}
    user: ${database.flyway.username}
    password: ${database.flyway.password}
  # H2 Console
  h2:
    console:
      enabled: false


# PROD Profile
---
spring:
  config:
    activate:
      on-profile: prod
  web:
    resources:
      cache:
        period: 3600
  # POSTGRES
  datasource:
    url: ${database.url}
    username: ${database.username}
    password: ${database.password}
  #JPA
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  # Flyway
  flyway:
    enabled: true
    init-sqls:
      - CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    baseline-on-migrate: true
    locations: classpath:db/migration
    url: ${database.flyway.url}
    user: ${database.flyway.username}
    password: ${database.flyway.password}
  # H2 Console
  h2:
    console:
      enabled: false
